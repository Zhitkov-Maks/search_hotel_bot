from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
    CallbackQuery,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from pydantic import ValidationError

from botrequest.serch_city import get_city_request
from config import menu
from crud.crud import write_data_in_db
from state_hotel import HotelInfoState, BestDealState
from utill.data_collection import distributor_low_high
from utill.validate_data import validate_date, check_dt_1_less_date_2

lh_router = Router()


@lh_router.callback_query(
    (F.data == "/bestdeal") | (F.data == "/highprice") | (F.data == "/lowprice")
)
async def begin_work(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ highprice, lowprice"""
    await state.update_data(command=callback.data)
    await state.set_state(HotelInfoState.city)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å: ",
        reply_markup=ReplyKeyboardRemove(),
    )


@lh_router.message(HotelInfoState.city)
async def enter_date_in(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –≥–æ—Ä–æ–¥–∞."""
    await message.answer("–ñ–¥–∏—Ç–µ –∏–¥–µ—Ç –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞....")
    search_city = await get_city_request(message.text)
    if search_city:
        await state.update_data(city=search_city[1])
        await state.set_state(HotelInfoState.date_in)
        command = await state.get_data()

        if command["command"] == "/bestdeal":
            await state.set_state(BestDealState.price_min)
            await message.answer(
                f"–ì–æ—Ä–æ–¥ {search_city[0]} üëå –Ω–∞–π–¥–µ–Ω.\n"
                f"–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ USD. –Ø –ø—Ä–∏–º—É —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
                reply_markup=ReplyKeyboardRemove(),
            )
        else:
            await message.answer(
                f"–ì–æ—Ä–æ–¥ {search_city[0]} üëå –Ω–∞–π–¥–µ–Ω.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–¥–¥-–º–º-–≥–≥–≥–≥>. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã "
                f"–Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.(—è –ø—Ä–æ–≤–µ—Ä—é üòé)",
                reply_markup=ReplyKeyboardRemove(),
            )
    else:
        await state.set_state(HotelInfoState.city)
        await message.answer(
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚òπÔ∏è‚òπ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤–≤–µ–¥–∏—Ç–µ /help."
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: "
        )


@lh_router.message(HotelInfoState.date_in)
async def enter_date_out(message: types.Message, state: FSMContext):
    check_date = await validate_date(message.text)

    if not check_date:
        await state.set_state(HotelInfoState.date_in)
        await message.reply(
            "–û–ô. –û—à–∏–±–æ—á–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. \n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–¥–¥-–º–º-–≥–≥–≥–≥>. "
            "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å! "
            "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.(—è –ø—Ä–æ–≤–µ—Ä—é üòé)"
        )
    else:
        await state.update_data(date_in=message.text)
        await state.set_state(HotelInfoState.date_out)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞. –í —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ.",
            reply_markup=ReplyKeyboardRemove(),
        )


@lh_router.message(HotelInfoState.date_out)
async def enter_date_out(message: types.Message, state: FSMContext):
    check_date = await validate_date(message.text)
    date_in = await state.get_data()
    date_out = message.text
    check_dates = await check_dt_1_less_date_2(date_in["date_in"], date_out)

    if not check_date:
        await state.set_state(HotelInfoState.date_out)
        await message.reply(
            "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥! \n" "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–¥–¥-–º–º-–≥–≥–≥–≥>."
        )

    elif not check_dates:
        await state.set_state(HotelInfoState.date_in)
        await message.reply(
            "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞! \n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–¥–¥-–º–º-–≥–≥–≥–≥>."
        )

    else:
        await state.update_data(date_out=message.text, count_day=check_dates)
        await state.set_state(HotelInfoState.photo_need)
        await message.answer(
            f"–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ? –≠—Ç–æ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="Yes"),
                        KeyboardButton(text="No"),
                    ]
                ],
                resize_keyboard=True,
            ),
        )


@lh_router.message(HotelInfoState.photo_need, F.text.casefold() == "yes")
async def enter_count_photo(message: types.Message, state: FSMContext) -> None:
    await state.set_state(HotelInfoState.count_photo)
    builder = ReplyKeyboardBuilder()
    for i in range(1, 11):
        builder.add(types.KeyboardButton(text=str(i)))
    builder.adjust(4)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


@lh_router.message(HotelInfoState.photo_need, F.text.casefold() == "no")
@lh_router.message(HotelInfoState.count_photo)
async def final_function(message: types.Message, state: FSMContext) -> None:
    if not message.text.isdigit() and not message.text == "no":
        await state.set_state(HotelInfoState.count_photo)
        builder = ReplyKeyboardBuilder()
        for i in range(1, 11):
            builder.add(types.KeyboardButton(text=str(i)))
        builder.adjust(4)
        await message.answer(
            "–Ø –æ–∂–∏–¥–∞–ª —É–≤–∏–¥–µ—Ç—å —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=builder.as_markup(resize_keyboard=True),
        )

    else:
        if message.text.isdigit():
            await state.update_data(count_photo=int(message.text))

        elif message.text == "no":
            await state.update_data(count_photo=None)

        await message.reply(
            "–û–∂–∏–¥–∞–π—Ç–µ –∏–¥–µ—Ç —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏....",
            reply_markup=ReplyKeyboardRemove(),
        )

        data: dict = await state.get_data()
        command: str = data.get("command")
        count_day = data.get("count_day")
        result: list = await distributor_low_high(data)
        for mess in result:
            await message.answer(
                f"–û—Ç–µ–ª—å: {mess['name']}\n"
                f"–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {mess['price']}\n"
                f"–¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${count_day * int(mess['price'][1:])}\n"
                f"–ê–¥—Ä–µ—Å: {mess['address']}\n"
                f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {mess['distance']}–ö–º",
                reply_markup=ReplyKeyboardRemove(),
            )
            # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
            if mess["image"]:
                for img in mess["image"]:
                    try:
                        await message.answer_photo(
                            photo=img[1],
                            caption=img[2],
                        )
                    except ValidationError:
                        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
        await message.answer("–ú–µ–Ω—é", reply_markup=menu)
        await write_data_in_db(result, message.from_user.id, command, count_day)
        await state.clear()
