from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton

from botrequest.serch_city import get_city_request
from data_collection import distributor_low_high
from state_hote import HotelInfoState, BestDealState
from utill.validate_data import validate_date, check_dt_1_less_date_2

lh_router = Router()


@lh_router.message(
    (F.text == "/bestdeal") | (F.text == "/highprice") | (F.text == "/lowprice")
)
async def begin_work(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ highprice, lowprice"""
    await state.update_data(command=message.text)
    await state.set_state(HotelInfoState.city)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å: ",
        reply_markup=ReplyKeyboardRemove(),
    )


@lh_router.message(HotelInfoState.city)
async def enter_date_in(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –≥–æ—Ä–æ–¥–∞."""
    await message.answer("–ñ–¥–∏—Ç–µ –∏–¥–µ—Ç –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞....")
    search_city = await get_city_request(message.text)

    if search_city:
        await state.update_data(city=search_city[1])
        await state.set_state(HotelInfoState.date_in)
        command = await state.get_data()
        if command["command"] == "/bestdeal":
            await state.set_state(BestDealState.price_min)
            await message.answer(
                f"–ì–æ—Ä–æ–¥ {search_city[0]} üëå –Ω–∞–π–¥–µ–Ω.\n" "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É.",
                reply_markup=ReplyKeyboardRemove(),
            )
        else:
            await message.answer(
                f"–ì–æ—Ä–æ–¥ {search_city[0]} üëå –Ω–∞–π–¥–µ–Ω.\n"
                f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–¥–¥-–º–º-–≥–≥–≥–≥>.",
                reply_markup=ReplyKeyboardRemove(),
            )
    else:
        await state.set_state(HotelInfoState.city)
        await message.answer(
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚òπÔ∏è‚òπ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: "
        )


@lh_router.message(HotelInfoState.date_in)
async def enter_date_out(message: types.Message, state: FSMContext):
    check_date = await validate_date(message.text)

    if not check_date:
        await state.set_state(HotelInfoState.date_in)
        await message.reply(
            "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥! \n" "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–¥–¥-–º–º-–≥–≥–≥–≥>."
        )
    else:
        await state.update_data(date_in=message.text)
        await state.set_state(HotelInfoState.date_out)
        await message.answer(
            "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: ",
            reply_markup=ReplyKeyboardRemove(),
        )


@lh_router.message(HotelInfoState.date_out)
async def enter_date_out(message: types.Message, state: FSMContext):
    check_date = await validate_date(message.text)
    date_in = await state.get_data()
    check_dates = await check_dt_1_less_date_2(date_in["date_in"], message.text)
    if not check_date:
        await state.set_state(HotelInfoState.date_out)
        await message.reply(
            "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥! \n" "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–¥–¥-–º–º-–≥–≥–≥–≥>."
        )

    elif not check_dates:
        await state.set_state(HotelInfoState.date_in)
        await message.reply(
            "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞! \n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–¥–¥-–º–º-–≥–≥–≥–≥>."
        )

    else:
        await state.update_data(date_out=message.text)
        await state.set_state(HotelInfoState.photo_need)
        await message.answer(
            f"–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ? –≠—Ç–æ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton(text="Yes"),
                        KeyboardButton(text="No"),
                    ]
                ],
                resize_keyboard=True,
            ),
        )


@lh_router.message(HotelInfoState.photo_need, F.text.casefold() == "yes")
async def enter_count_photo(message: types.Message, state: FSMContext) -> None:
    await state.set_state(HotelInfoState.count_photo)
    await message.reply(
        "–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–≤–∏–¥–µ—Ç—å?",
        reply_markup=ReplyKeyboardRemove(),
    )


@lh_router.message(HotelInfoState.photo_need, F.text.casefold() == "no")
@lh_router.message(HotelInfoState.count_photo)
async def final_function(message: types.Message, state: FSMContext) -> None:
    if message.text.isdigit():
        await state.update_data(count_photo=int(message.text))
    else:
        await state.update_data(count_photo=None)
    await message.reply(
        "–û–∂–∏–¥–∞–π—Ç–µ –∏–¥–µ—Ç —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏....",
        reply_markup=ReplyKeyboardRemove(),
    )
    data = await state.get_data()
    result = await distributor_low_high(data)

    for mess in result:
        await message.answer(
            f"–û—Ç–µ–ª—å: {mess['name']}\n"
            f"–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {mess['price']}\n"
            f"–ê–¥—Ä–µ—Å: {mess['address']}\n"
            f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {mess['distance']}–ö–º",
            reply_markup=ReplyKeyboardRemove(),
        )
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if mess["image"]:
            for img in mess["image"]:
                await message.answer_photo(
                    photo=img[1],
                    caption=img[2],
                )
